{"version":3,"file":"static/js/76.6aee423a.chunk.js","mappings":"6PACA,EAAgC,4B,SCmDhC,EA7Cc,WACV,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAmBR,IAjBAE,EAAAA,EAAAA,YAAU,WACN,KAAIJ,EAAKK,OAAO,GAAhB,CAGA,IAAMC,EAAS,mCAAG,8GAEiBC,EAAAA,EAAAA,IAAYL,GAF7B,OAEJM,EAFI,OAGVP,EAAQO,GAHE,gDAMVC,QAAQC,IAAR,MANU,yDAAH,qDASfJ,GAVC,CAWJ,GAAE,CAACJ,EAAIF,EAAKK,SAGO,IAAhBL,EAAKK,OACL,OAAQ,8CAGZ,IAAMM,EAASX,EAAKY,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC3C,OACI,0BACKD,IAAgB,gBACbE,UAAWC,EACXC,IAAG,yCAAoCJ,GACvCK,IAAKN,KACT,wBAAKA,KACL,4CAAmBE,QANdK,EAAAA,EAAAA,MAShB,IAED,OACI,wBACCT,GAGR,C,uDCjDM,IAkBIS,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvB,EAAIwB,GAWvD,OARExB,IAFFwB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast__profile\":\"Cast_cast__profile__BtYCx\"};","\nimport { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\nimport { getCastById } from \"components/ApiService\";\nimport css from 'components/Cast/Cast.module.css';\n\nconst Cast  = () => {\n    const [cast, setCast] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        if (cast.length>0) {\n        return\n        }\n        const fetchCast = async () => {\n            try {\n                const responseCast = await getCastById(id);\n                setCast(responseCast);\n\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        fetchCast();\n    }, [id, cast.length]);\n\n\n    if (cast.length === 0) {\n        return (<p>Cast is not found.</p>)\n    }\n\n    const actors = cast.map(({ name, profile_path, character }) => {\n        return (\n            <li key={nanoid()}>\n                {profile_path && <img\n                    className={css.cast__profile}\n                    src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                    alt={name} />}\n                <h4>{name}</h4>\n                <p>{ `Character: ${character}`}</p>\n            </li>\n        )\n    })\n        \n    return (  \n        <ul>\n        {actors}\n        </ul>\n    )\n}\n\nexport default Cast;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","cast","setCast","id","useParams","useEffect","length","fetchCast","getCastById","responseCast","console","log","actors","map","name","profile_path","character","className","css","src","alt","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}