{"version":3,"file":"static/js/186.8e9002fe.chunk.js","mappings":"kOA+CA,UA1CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAoBR,IAlBAE,EAAAA,EAAAA,YAAU,WACR,KAAIJ,EAAQK,OAAO,GAAnB,CAIA,IAAMC,EAAY,mCAAG,8GAEaC,EAAAA,EAAAA,IAAcL,GAF3B,OAEXM,EAFW,OAGjBP,EAAWO,GAHM,gDAMjBC,QAAQC,IAAR,MANiB,yDAAH,qDASlBJ,GAXC,CAYF,GAAE,CAACJ,EAAIF,EAAQK,SAGO,IAAnBL,EAAQK,OACV,OAAQ,kDAGV,IAAMM,EAASX,EAAQY,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACpC,OACE,2BACE,0BAAKD,EAAL,QACA,uBAAKC,OAFEC,EAAAA,EAAAA,MAKZ,IAED,OACE,wBACGJ,GAGN,C,uDC5CM,IAkBII,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAClB,EAAImB,GAWvD,OAREnB,IAFFmB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\nimport { getReviewById } from \"components/ApiService\";\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (reviews.length>0) {\n      return\n    }\n\n    const fetchReviews = async () => {\n      try {\n        const responseReviews = await getReviewById(id);\n        setReviews(responseReviews);\n\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchReviews();\n  }, [id, reviews.length]);\n\n \n  if (reviews.length === 0) {\n    return (<p>Reviews are not found.</p>)\n  }\n\n  const review = reviews.map(({ author, content }) => {\n    return (\n      <li key={nanoid()}>\n        <h3>{author}:</h3>\n        <p>{ content}</p>\n      </li>\n    )\n  })\n\n  return (\n    <ul>\n      {review}\n    </ul>\n  )\n}\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","reviews","setReviews","id","useParams","useEffect","length","fetchReviews","getReviewById","responseReviews","console","log","review","map","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}